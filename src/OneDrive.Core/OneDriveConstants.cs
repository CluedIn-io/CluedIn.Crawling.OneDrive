using System;
using System.Collections.Generic;
using CluedIn.Core.Net.Mail;
using CluedIn.Core.Providers;

namespace CluedIn.Crawling.OneDrive.Core
{
    public class OneDriveConstants
    {
        public struct KeyName
        {
            public const string ApiKey = nameof(ApiKey);
            public const string TargetUrl = nameof(TargetUrl);
            public const string Tenant = nameof(Tenant);
            public const string ClientID = nameof(ClientID);
            public const string ClientSecret = nameof(ClientSecret);
        }

        public const string CrawlerDescription = "Microsoft OneDrive is a file hosting service and synchronization service operated by Microsoft as part of its web version of Office.";
        public const string Instructions = "";
        public const IntegrationType Type = IntegrationType.Cloud;
        public const string Uri = "https://www.microsoft.com/en/microsoft-365/onedrive/online-cloud-storage";

        public const string IconResourceName = "Resources.onedrive.png";

        public static IList<string> ServiceType = new List<string> { "" };
        public static IList<string> Aliases = new List<string> { "Microsoft OneDrive" };
        public const string Category = "";
        public const string Details = "";
        public static AuthMethods AuthMethods = new AuthMethods()
        {
            credentials = new Control[]
            {
                new Control()
                {
                    displayName = KeyName.TargetUrl,
                    isRequired = false,
                    name = KeyName.TargetUrl,
                    type = "text"
                },
                new Control()
                {
                    displayName = KeyName.Tenant,
                    isRequired = false,
                    name = KeyName.Tenant,
                    type = "text"
                },
                new Control()
                {
                    displayName = KeyName.ClientID,
                    isRequired = false,
                    name = KeyName.ClientID,
                    type = "text"
                },
                new Control()
                {
                    displayName = KeyName.ClientSecret,
                    isRequired = false,
                    name = KeyName.ClientSecret,
                    type = "password"
                }
            }
        };


        public const bool SupportsConfiguration = true;
        public const bool SupportsWebHooks = false;
        public const bool SupportsAutomaticWebhookCreation = true;

        public const bool RequiresAppInstall = false;
        public const string AppInstallUrl = null;
        public const string ReAuthEndpoint = null;

        #region Autogenerated constants
        public const string CodeOrigin = "OneDrive";
        public const string ProviderRootCodeValue = "OneDrive";
        public const string CrawlerName = "OneDriveCrawler";
        public const string CrawlerComponentName = "OneDriveCrawler";
        public static readonly Guid ProviderId = Guid.Parse("7fec5ac5-c2e6-4326-a41b-8a731fdcf9b5");
        public const string ProviderName = "OneDrive";


        public const string ClientID = "";
        public const string ClientSecret = "";



        public static readonly ComponentEmailDetails ComponentEmailDetails = new ComponentEmailDetails
        {
            Features = new Dictionary<string, string>
            {
                                       { "Tracking",        "Expenses and Invoices against customers" },
                                       { "Intelligence",    "Aggregate types of invoices and expenses against customers and companies." }
                                   },
            Icon = ProviderIconFactory.CreateUri(ProviderId),
            ProviderName = ProviderName,
            ProviderId = ProviderId,
            Webhooks = SupportsWebHooks
        };

        public static IProviderMetadata CreateProviderMetadata()
        {
            return new ProviderMetadata
            {
                Id = ProviderId,
                ComponentName = CrawlerName,
                Name = ProviderName,
                Type = Type.ToString(),
                SupportsConfiguration = SupportsConfiguration,
                SupportsWebHooks = SupportsWebHooks,
                SupportsAutomaticWebhookCreation = SupportsAutomaticWebhookCreation,
                RequiresAppInstall = RequiresAppInstall,
                AppInstallUrl = AppInstallUrl,
                ReAuthEndpoint = ReAuthEndpoint,
                ComponentEmailDetails = ComponentEmailDetails
            };
        }
        #endregion
    }
}
